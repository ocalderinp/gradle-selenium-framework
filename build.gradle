import org.apache.tools.ant.taskdefs.condition.Os
import org.apache.commons.io.FileUtils

group 'gradle-selenium-framework'
version '1.0'

apply plugin: 'java'

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {

    drivers = [
            "firefox",
            "chrome",
            "phantomJs",
            "ieexplorer"
    ]

    ext {
        seleniumVersion = '2.53.1'
        JunitVersion = '4.12'
        phantomjsVersion = '1.1.0'
    }
}


repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: "$JunitVersion"
    testCompile group: 'org.seleniumhq.selenium', name: 'selenium-support', version: "$seleniumVersion"
    testCompile group: 'org.seleniumhq.selenium', name: 'selenium-chrome-driver', version: "$seleniumVersion"
    testCompile group: 'org.seleniumhq.selenium', name: 'selenium-firefox-driver', version: "$seleniumVersion"
    testCompile group: 'com.github.detro.ghostdriver', name: 'phantomjsdriver', version: "$phantomjsVersion"
    testCompile group: 'org.seleniumhq.selenium', name: 'selenium-ie-driver', version: "$seleniumVersion"
}

drivers.each { driver ->
    task("${driver}Test", type: Test){
        reports {
            html.enabled = false
            junitXml.enabled = false
        }
        testLogging {
            events 'started', 'passed', 'standard_out' }

        outputs.upToDateWhen { false }  // Always run tests

        systemProperty "geb.build.reportsDir", reporting.file("$name/geb")
        systemProperty "env.browser", driver

    }
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "commons-io:commons-io:2.4"
    }
}

def chromeDriverVersion = "2.36"
def ieExplorerVersion = "3.9.0"
def phantomJSDriverVersion = "2.5.0-beta"

task('downloadChromeDriver'){
    def outputFile = file("$buildDir/webdriver/chromedriver.zip")
    inputs.property("chromeDriverVersion", chromeDriverVersion)
    outputs.file(outputFile)

    doLast {
        def driverOsFilenamePart
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            driverOsFilenamePart = "win32"
        } else if (Os.isFamily(Os.FAMILY_MAC)) {
            driverOsFilenamePart = "mac32"
        } else if (Os.isFamily(Os.FAMILY_UNIX)) {
            driverOsFilenamePart = Os.isArch("amd64") ? "linux64" : "linux32"
        }
        FileUtils.copyURLToFile(new URL("http://chromedriver.storage.googleapis.com/${chromeDriverVersion}/chromedriver_${driverOsFilenamePart}.zip"), outputFile)
    }
}

task('unzipChromeDriver', type: Copy) {
    def outputDir = file("$buildDir/webdriver/chromedriver")
    dependsOn downloadChromeDriver
    outputs.dir(outputDir)

    from(zipTree(downloadChromeDriver.outputs.files.singleFile))
    into(outputDir)
}

task('downloadPhantomJs') {
    def osFilenamePart
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        osFilenamePart = "windows.zip"
    } else if (Os.isFamily(Os.FAMILY_MAC)) {
        osFilenamePart = "macosx.zip"
    } else if (Os.isFamily(Os.FAMILY_UNIX)) {
        osFilenamePart = Os.isArch("amd64") ? "linux-x86_64.tar.bz2" : "linux-i686.tar.bz2"
    }

    def filename = "phantomjs-$phantomJSDriverVersion-$osFilenamePart"
    def outputFile = file("$buildDir/webdriver/$filename")
    inputs.property("phantomJSDriverVersion", "$phantomJSDriverVersion")
    outputs.file(outputFile)

    doLast {
        FileUtils.copyURLToFile(new URL("https://bitbucket.org/ariya/phantomjs/downloads/$filename"), outputFile)
    }
}

task('unzipPhantomJs', type: Copy) {
    def outputDir = file("$buildDir/webdriver/phantomjs")
    dependsOn downloadPhantomJs
    outputs.dir(outputDir)

    def archive = downloadPhantomJs.outputs.files.singleFile

    from(Os.isFamily(Os.FAMILY_MAC) || Os.isFamily(Os.FAMILY_WINDOWS) ? zipTree(archive) : tarTree(archive))
    into(outputDir)
    eachFile { FileCopyDetails fcp ->
        fcp.relativePath = new RelativePath(!fcp.directory, *fcp.relativePath.segments[1..-1])
    }
}

task('downloadIEDriver'){
    def outputFile = file("$buildDir/webdriver/iedriver.zip")
    inputs.property("ieExplorerVersion", ieExplorerVersion)
    outputs.file(outputFile)

    doLast {
        def driverOsFilenamePart
        driverOsFilenamePart = Os.isArch("amd64") ? "x64" : "Win32"
        FileUtils.copyURLToFile(new URL("http://selenium-release.storage.googleapis.com/${ieExplorerVersion}/IEDriverServer_${driverOsFilenamePart}_${ieExplorerVersion}.zip"), outputFile)
    }
}

task('unzipIEDriver', type: Copy) {
    def outputDir = file("$buildDir/webdriver/iedriver")
    dependsOn downloadIEDriver
    outputs.dir(outputDir)

    from(zipTree(downloadIEDriver.outputs.files.singleFile))
    into(outputDir)
}

chromeTest {
    dependsOn unzipChromeDriver

    def chromedriverFilename = Os.isFamily(Os.FAMILY_WINDOWS) ? "chromedriver.exe" : "chromedriver"
    systemProperty "webdriver.chrome.driver", new File(unzipChromeDriver.outputs.files.singleFile, chromedriverFilename).absolutePath
}

phantomJsTest {
    dependsOn unzipPhantomJs

    def driverFilename = Os.isFamily(Os.FAMILY_WINDOWS) ? "phantomjs.exe" : "phantomjs"
    systemProperty "phantomjs.binary.path", new File(unzipPhantomJs.outputs.files.singleFile, driverFilename).absolutePath
}

ieexplorerTest {
    dependsOn unzipIEDriver

    def driverFilename = "IEDriverServer.exe"
    systemProperty "webdriver.ie.driver", new File(unzipIEDriver.outputs.files.singleFile, driverFilename).absolutePath
}